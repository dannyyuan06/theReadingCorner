generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  bookid             String               @id
  bookPicture        String
  title              String
  author             String
  description        String
  pageCount          Int
  BookSuggestions    BookSuggestions[]
  BulletinBoardBooks BulletinBoardBooks[]
  CurrentlyReading   CurrentlyReading[]
  Meetings           Meetings[]
  UserBook           UserBook[]
}

model BookSuggestions {
  booksuggestionid Int    @id @default(autoincrement())
  bookid           String
  username         String
  Book             Book   @relation(fields: [bookid], references: [bookid])
  Users            Users  @relation(fields: [username], references: [username])
}

model BulletinBoardBooks {
  bulletinboardbookid   Int                   @id @default(autoincrement())
  bookid                String
  messageid             Int
  Book                  Book                  @relation(fields: [bookid], references: [bookid])
  BulletinBoardMessages BulletinBoardMessages @relation(fields: [messageid], references: [messageid])
}

model BulletinBoardMessages {
  messageid          Int                  @id @default(autoincrement())
  body               String
  dateCreated        DateTime             @default(now())
  username           String
  BulletinBoardBooks BulletinBoardBooks[]
  Users              Users                @relation(fields: [username], references: [username])
}

model CurrentlyReading {
  readid        Int      @id @default(autoincrement())
  bookid        String
  averageRating Float
  dateStarted   DateTime @default(now())
  pageNumber    Int
  status        Int
  Book          Book     @relation(fields: [bookid], references: [bookid])
}

model Friends {
  friendid                       Int      @id @default(autoincrement())
  friend1id                      String
  friend2id                      String
  status                         Int
  dateStarted                    DateTime @default(now())
  Users_Friends_friend1idToUsers Users    @relation("Friends_friend1idToUsers", fields: [friend1id], references: [username])
  Users_Friends_friend2idToUsers Users    @relation("Friends_friend2idToUsers", fields: [friend2id], references: [username])
}

model GenreSuggestion {
  genresuggestionid Int    @id @default(autoincrement())
  username          String
  genre             String
  Users             Users  @relation(fields: [username], references: [username])
}

model Meetings {
  meetingid     Int      @id @default(autoincrement())
  title         String
  description   String
  dateOfMeeting DateTime
  link          String
  hostid        String
  bookid        String
  Book          Book     @relation(fields: [bookid], references: [bookid])
  Users         Users    @relation(fields: [hostid], references: [username])
}

model Statistics {
  statid               Int    @id @default(autoincrement())
  currentlyReadingBook String
  averageRating        Float
  numOfMembers         Int
  numOfBooksRead       Int
  bulletinEngagement   Float
}

model UserBook {
  userbookid   Int      @id @default(autoincrement())
  dateStarted  DateTime @default(now())
  dateFinished DateTime
  score        Int
  status       Int
  page         Int
  bookid       String
  username     String
  Book         Book     @relation(fields: [bookid], references: [bookid])
  Users        Users    @relation(fields: [username], references: [username])
}

model Users {
  username                         String                  @id
  email                            String
  firstName                        String
  lastName                         String
  password                         String
  lastOnline                       DateTime
  joinDate                         DateTime                @default(now())
  numBulletinPosts                 Int
  numReview                        Int
  numBooksRead                     Int
  profilePicture                   String
  accessLevel                      Int
  description                      String
  meanScore                        Float
  daysRead                         Float
  lookedAtBulletin                 Boolean
  BookSuggestions                  BookSuggestions[]
  BulletinBoardMessages            BulletinBoardMessages[]
  Friends_Friends_friend1idToUsers Friends[]               @relation("Friends_friend1idToUsers")
  Friends_Friends_friend2idToUsers Friends[]               @relation("Friends_friend2idToUsers")
  GenreSuggestion                  GenreSuggestion[]
  Meetings                         Meetings[]
  UserBook                         UserBook[]
}
